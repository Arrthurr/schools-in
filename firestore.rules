  rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for security checks
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isProvider() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
    }

    function isActiveUser() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }

    function isValidEmail(email) {
      return email != null && email.matches('.*@.*\\..*');
    }

    function hasValidTimestamp(data) {
      return data.keys().hasAny(['createdAt', 'updatedAt']) &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }

    // Users collection rules - Enhanced security
    match /users/{userId} {
      allow create: if isOwner(userId) && 
                       isValidEmail(resource.data.email) &&
                       hasValidTimestamp(resource.data) &&
                       resource.data.role in ['provider', 'admin'];
      
      allow read: if isOwner(userId) || isAdmin();
      
      allow update: if (isOwner(userId) && 
                       // Users can only update specific fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['displayName', 'photoURL', 'phoneNumber', 'preferences', 'updatedAt'])) ||
                       (isAdmin() && hasValidTimestamp(request.resource.data));
      
      allow delete: if isAdmin();
      
      // List operations for admins only
      allow list: if isAdmin();
    }

    // Locations collection rules - Enhanced with provider access
    match /locations/{locationId} {
      allow read: if isAuthenticated() &&
                     (isAdmin() || 
                      isProvider() &&
                      resource.data.assignedProviders.hasAny([request.auth.uid]));
      
      allow create, update: if isAdmin() && 
                              hasValidTimestamp(request.resource.data) &&
                              request.resource.data.latitude is number &&
                              request.resource.data.longitude is number &&
                              request.resource.data.name is string &&
                              request.resource.data.address is string;
      
      allow delete: if isAdmin();
      
      // List operations - admins can see all, providers only their assigned locations
      allow list: if isAdmin() || isProvider();
    }

    // Sessions collection rules - Enhanced validation
    match /sessions/{sessionId} {
      allow create: if isAuthenticated() && 
                       isProvider() &&
                       isActiveUser() &&
                       request.auth.uid == request.resource.data.userId &&
                       hasValidTimestamp(request.resource.data) &&
                       request.resource.data.status in ['active', 'paused'] &&
                       request.resource.data.locationId is string &&
                       request.resource.data.startTime is timestamp;
      
      allow read: if isAuthenticated() &&
                     (isOwner(resource.data.userId) || isAdmin());
      
      allow update: if isAuthenticated() &&
                       (isOwner(resource.data.userId) || isAdmin()) &&
                       hasValidTimestamp(request.resource.data) &&
                       // Validate state transitions
                       ((resource.data.status == 'active' && request.resource.data.status in ['paused', 'completed']) ||
                        (resource.data.status == 'paused' && request.resource.data.status in ['active', 'completed']) ||
                        (isAdmin() && request.resource.data.status in ['active', 'paused', 'completed', 'cancelled']));
      
      allow delete: if isAdmin();
      
      // List operations with user filtering  
      allow list: if isAdmin() || isProvider();
    }

    // System metadata collection for analytics (admin only)
    match /system/{document} {
      allow read, write: if isAdmin();
    }

    // Cache metadata collection for performance monitoring
    match /cache_stats/{document} {
      allow read, write: if isAdmin();
    }

    // Rate limiting collection
    match /rate_limits/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
  }
}
