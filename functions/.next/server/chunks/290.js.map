{"version":3,"file":"290.js","mappings":"2gBAiBO,eAAAA,IAEP,QAAAC,IADA,+CAEA,IAEA,MAAAC,CADA,MAAiCC,EAAAC,QAAE,CAAAC,QAAA,CAAAJ,EAAA,CAAkBK,SAAA,QAAkB,EACvEC,IAAA,EACA,CACA,MAAAC,EAAA,CACYC,EAAAC,CAAI,CAAAC,KAAA,8BAAoCH,EAAE,EACtD,CAGA","sources":["webpack://schools-in/./node_modules/@sentry/nextjs/node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-linux.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\nexport async function getMachineId() {\n    const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n    for (const path of paths) {\n        try {\n            const result = await fs.readFile(path, { encoding: 'utf8' });\n            return result.trim();\n        }\n        catch (e) {\n            diag.debug(`error reading machine id: ${e}`);\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=getMachineId-linux.js.map"],"names":["getMachineId","path","result","fs__WEBPACK_IMPORTED_MODULE_0__","promises","readFile","encoding","trim","e","_opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__","K","debug"],"sourceRoot":""}