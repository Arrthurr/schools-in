name: Firebase Hosting Deployment Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "18"
  FIREBASE_PROJECT_ID: "schools-in-check"

jobs:
  # Determine deployment environment
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      should-deploy: ${{ steps.determine-env.outputs.should-deploy }}
      channel-id: ${{ steps.determine-env.outputs.channel-id }}

    steps:
      - name: Determine environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

          # Set channel ID
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "channel-id=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "channel-id=live" >> $GITHUB_OUTPUT
          else
            echo "channel-id=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi

  # Build for deployment
  build-for-deploy:
    name: Build for ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" >> .env.local
          echo "NEXT_PUBLIC_APP_VERSION=${{ github.sha }}" >> .env.local
          echo "NEXT_PUBLIC_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> .env.local
          echo "NEXT_PUBLIC_APP_ENV=${{ needs.setup.outputs.environment }}" >> .env.local

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test -- --watchAll=false --coverage=false --passWithNoTests
        env:
          CI: true

      - name: Build application
        run: |
          echo "‚è≥ Starting production build (will be followed by static export)..."
          NODE_ENV=production NEXT_PUBLIC_APP_ENV=${{ needs.setup.outputs.environment }} npm run build

      - name: Export static site
        run: |
          echo "üì¶ Exporting static site..."
          NEXT_PUBLIC_APP_ENV=${{ needs.setup.outputs.environment }} npm run export

      - name: Verify static export
        run: |
          echo "üîç Verifying static export output..."
          if [ ! -f out/index.html ]; then
            echo "‚ùå Static export failed: out/index.html not found" >&2
            echo "Directory listing (out):" >&2
            ls -al out || true
            exit 1
          fi
          echo "‚úÖ Static export verified (out/index.html present)."

      - name: Analyze bundle size
        if: needs.setup.outputs.environment == 'production'
        run: |
          npm run analyze
          echo "üì¶ Bundle analysis completed for production build"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.setup.outputs.environment }}
          path: out/**
          retention-days: 30

  # Deploy to Firebase Hosting
  deploy-hosting:
    name: Deploy to Firebase Hosting
    runs-on: ubuntu-latest
    needs: [setup, build-for-deploy]
    if: needs.setup.outputs.should-deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.setup.outputs.environment }}
          path: .

      - name: Verify build artifact structure
        run: |
          echo "üîç Checking downloaded artifact structure..."
          if [ ! -f out/index.html ]; then
            echo "‚ùå Expected out/index.html not found after artifact download." >&2
            echo "Top-level files:" >&2
            find . -maxdepth 2 -type f | sed 's|^|FILE: |'
            exit 1
          fi
          echo "‚úÖ Artifact structure looks good."

      - name: Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: ${{ needs.setup.outputs.channel-id }}
          expires: ${{ needs.setup.outputs.environment == 'production' && '90d' || '30d' }}
        # Static export provided in out/ so no webframeworks experiment needed

      - name: Update deployment status
        run: |
          echo "üöÄ Deployed to Firebase Hosting"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Channel: ${{ needs.setup.outputs.channel-id }}"
          echo "URL: ${{ steps.deploy.outputs.details_url }}"

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview deployment ready!**
              
              **Preview URL**: ${{ steps.deploy.outputs.details_url }}
              **Expire**: 30 days from now
              
              ### What's included:
              - ‚úÖ Latest code changes
              - ‚úÖ Image optimization  
              - ‚úÖ Firebase caching
              - ‚úÖ PWA functionality
              
              Test the changes and provide feedback!`
            })

  # Deploy Firebase Rules and Indexes
  deploy-firebase-config:
    name: Deploy Firebase Rules & Config
    runs-on: ubuntu-latest
    needs: [setup, deploy-hosting]
    if: needs.setup.outputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Firebase CLI and deploy rules
        run: |
          npm install -g firebase-tools
          echo "Deploying Firestore rules and indexes..."
          firebase deploy --only firestore:rules,firestore:indexes --token "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}" --non-interactive
          echo "‚úÖ Firestore rules and indexes deployed"

      - name: Deploy Storage rules
        run: |
          firebase deploy --only storage
          echo "‚úÖ Storage rules deployed"

      - name: Deploy Cloud Functions (if changed)
        run: |
          if git diff --name-only HEAD~1 | grep -q "functions/"; then
            echo "Functions changed, deploying..."
            firebase deploy --only functions
            echo "‚úÖ Cloud Functions deployed"
          else
            echo "No function changes detected, skipping deployment"
          fi

  # Post-deployment verification
  post-deploy-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [setup, deploy-hosting, deploy-firebase-config]
    if: needs.setup.outputs.environment == 'production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment propagation
        run: sleep 60

      - name: Health check
        run: |
          echo "üè• Running health checks..."

          # Basic connectivity
          curl -f https://schools-in-check.web.app/ || exit 1
          curl -f https://schools-in-check.web.app/dashboard || exit 1
          curl -f https://schools-in-check.web.app/admin || exit 1

          echo "‚úÖ All endpoints accessible"

      - name: Performance verification
        run: |
          echo "üìä Running performance verification..."
          npm install -g @lhci/cli

          # Run Lighthouse on key pages
          lhci autorun --collect.url=https://schools-in-check.web.app
          lhci autorun --collect.url=https://schools-in-check.web.app/dashboard

          echo "‚úÖ Performance verification completed"

      - name: Security headers check
        run: |
          echo "üõ°Ô∏è Checking security headers..."

          # Check for required security headers
          headers=$(curl -I https://schools-in-check.web.app/ 2>/dev/null)

          if echo "$headers" | grep -q "X-Frame-Options"; then
            echo "‚úÖ X-Frame-Options header present"
          else
            echo "‚ùå X-Frame-Options header missing"
            exit 1
          fi

          if echo "$headers" | grep -q "X-Content-Type-Options"; then
            echo "‚úÖ X-Content-Type-Options header present"
          else
            echo "‚ùå X-Content-Type-Options header missing"
            exit 1
          fi

          echo "‚úÖ Security headers verification completed"

      - name: PWA verification
        run: |
          echo "üì± Verifying PWA configuration..."

          # Check manifest
          curl -f https://schools-in-check.web.app/manifest.json || exit 1

          # Check service worker
          curl -f https://schools-in-check.web.app/sw.js || exit 1

          echo "‚úÖ PWA verification completed"

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs:
      [setup, deploy-hosting, deploy-firebase-config, post-deploy-verification]
    if: always()

    steps:
      - name: Generate deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Channel:** ${{ needs.setup.outputs.channel-id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-hosting.result }}" = "success" ]; then
            echo "‚úÖ **Hosting Deployment:** Success" >> $GITHUB_STEP_SUMMARY
            echo "üåê **Live URL:** https://schools-in-check.web.app" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Hosting Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy-firebase-config.result }}" = "success" ]; then
            echo "‚úÖ **Firebase Config:** Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
            echo "‚ùå **Firebase Config:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Firebase Config:** Skipped (not production)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.post-deploy-verification.result }}" = "success" ]; then
            echo "‚úÖ **Verification:** All checks passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
            echo "‚ùå **Verification:** Some checks failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Verification:** Skipped (not production)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Key Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Size:** $(du -sh out/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Files:** $(find out/ -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time:** ~$((SECONDS/60)) minutes" >> $GITHUB_STEP_SUMMARY

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-hosting]
    environment: production

    steps:
      - name: Setup Firebase CLI and rollback
        run: |
          npm install -g firebase-tools
          echo "üìã Recent deployments:"
          firebase hosting:releases:list --json --token "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}" | jq -r '.[0:5][] | "\(.createTime) - \(.message // "No message") - \(.version.status)"'

      - name: Rollback to previous version
        run: |
          echo "üîÑ Rolling back to previous deployment..."
          # Get the second most recent deployment (previous version)
          PREVIOUS_VERSION=$(firebase hosting:releases:list --json | jq -r '.[1].version.name')

          if [ "$PREVIOUS_VERSION" != "null" ] && [ "$PREVIOUS_VERSION" != "" ]; then
            firebase hosting:releases:rollback $PREVIOUS_VERSION
            echo "‚úÖ Rollback completed to version: $PREVIOUS_VERSION"
          else
            echo "‚ùå No previous version found for rollback"
            exit 1
          fi

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://schools-in-check.web.app/ || exit 1
          echo "‚úÖ Rollback verification successful"

      - name: Notify rollback
        run: |
          echo "üîÑ **Automatic Rollback Triggered**"
          echo ""
          echo "Deployment failed and was automatically rolled back."
          echo "**Branch:** ${{ github.ref }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Time:** $(date -u)"
          echo ""
          echo "Please investigate the deployment failure."
