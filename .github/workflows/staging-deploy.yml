name: Staging Environment Deployment

on:
  push:
    branches: [staging, develop]
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run full test suite"
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: "18"
  FIREBASE_PROJECT_ID: "schools-in-check"

jobs:
  # Quick validation for staging
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Quick lint check
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Quick test run
        if: github.event.inputs.run_tests != 'false'
        run: npm test -- --watchAll=false --passWithNoTests
        timeout-minutes: 10

  # Build staging version
  build-staging:
    name: Build Staging
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create staging environment file
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" >> .env.local
          echo "NEXT_PUBLIC_APP_VERSION=${{ github.sha }}" >> .env.local
          echo "NEXT_PUBLIC_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> .env.local
          echo "NEXT_PUBLIC_APP_ENV=staging" >> .env.local
          echo "NEXT_PUBLIC_ENABLE_ANALYTICS=false" >> .env.local
          echo "NEXT_PUBLIC_ENABLE_PERFORMANCE_MONITORING=true" >> .env.local

      - name: Build for staging
        run: |
          echo "⏳ Building Next.js app for staging..."
          NODE_ENV=production npm run build

      - name: Export static site
        run: |
          echo "📦 Exporting static site (next export)..."
          npm run export

      - name: Verify static export
        run: |
          if [ ! -f out/index.html ]; then
            echo "❌ Export failed: out/index.html missing" >&2
            ls -al out || true
            exit 1
          fi
          echo "✅ Static export verified."

      - name: Upload staging build
        uses: actions/upload-artifact@v4
        with:
          name: staging-build
          path: out/**
          retention-days: 7

  # Deploy to staging channel
  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: [build-staging]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download staging build
        uses: actions/download-artifact@v4
        with:
          name: staging-build
          path: .

      - name: Verify artifact structure
        run: |
          if [ ! -f out/index.html ]; then
            echo "❌ Artifact missing out/index.html" >&2
            find . -maxdepth 2 -type f
            exit 1
          fi
          echo "✅ Artifact structure good."

      - name: Deploy to staging channel
        id: staging-deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: staging
          expires: 14d
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Run staging smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."
          sleep 30  # Wait for deployment propagation

          # Basic connectivity tests
          curl -f "${{ steps.staging-deploy.outputs.details_url }}" || exit 1
          curl -f "${{ steps.staging-deploy.outputs.details_url }}/manifest.json" || exit 1

          echo "✅ Staging smoke tests passed"

      - name: Notify staging deployment
        if: always()
        run: |
          echo "📋 **Staging Deployment Summary**"
          echo ""
          echo "**Status:** ${{ job.status }}"
          echo "**URL:** ${{ steps.staging-deploy.outputs.details_url }}"
          echo "**Branch:** ${{ github.ref_name }}"
          echo "**Commit:** ${{ github.sha }}"
          echo ""
          echo "Ready for testing and QA review."

  # Auto-promote to production (optional)
  promote-to-production:
    name: Auto-Promote to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging' && success()
    environment:
      name: production-auto-promote
      url: https://schools-in-check.web.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          echo "🧪 Running full test suite before production promotion..."
          npm test -- --watchAll=false --coverage --passWithNoTests

      - name: Download staging build
        uses: actions/download-artifact@v4
        with:
          name: staging-build
          path: out/

      - name: Promote to production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Notify production promotion
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_MESSAGE: |
            🎉 **Auto-Promotion to Production**

            Staging deployment was successful and has been automatically promoted to production.

            **Live URL:** https://schools-in-check.web.app
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Tests:** All passed ✅
