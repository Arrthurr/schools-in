name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"
  FIREBASE_PROJECT_ID: "schools-in-check"

jobs:
  # Static Analysis and Linting
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: eslint-results.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: |
            coverage/
            jest-results.xml

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" >> .env.local
          echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env.local
        env:
          # Sentry settings used by the Webpack plugin for source map upload
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

      - name: Build application
        run: npm run build
        env:
          # Ensure Sentry plugin has access during build as well
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          # Optional tuning
          SENTRY_TRACES_SAMPLE_RATE: "1.0"

      - name: Export static files
        run: npm run export || echo "Export not available, using build output"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            out/
          retention-days: 1

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]

    strategy:
      matrix:
        browser: [chrome, firefox, edge]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Setup Firebase Emulators
        run: |
          npm install -g firebase-tools
          firebase emulators:exec --only auth,firestore,storage "echo 'Emulators ready'" &
          sleep 10

      - name: Run E2E tests
        run: npm run test:e2e:ci
        env:
          CYPRESS_BROWSER: ${{ matrix.browser }}

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/reports/

  # Performance & Accessibility Tests
  performance-accessibility:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Run Lighthouse CI
        run: |
          echo "üìä Running Lighthouse CI..."
          npm run lighthouse:local || echo "Lighthouse CI completed with warnings"

      - name: Run performance tests
        run: npm run test:performance

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            .lighthouseci/
            cypress/reports/performance/

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=high || echo "Audit completed with warnings"
        continue-on-error: true

  # Firebase Security Rules Test
  firebase-rules-test:
    name: Firebase Rules Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Firebase CLI and test rules
        run: |
          npm install -g firebase-tools
          echo "üß™ Testing Firebase rules..."
          echo "Using Firebase emulators for rule testing"
          firebase emulators:exec --only firestore "npm run test:firestore-rules" || echo "Rules testing completed"

      - name: Test Storage rules
        run: firebase emulators:exec --only storage "npm run test:storage-rules"

  # Deploy to Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance-accessibility, security-scan]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Deploy to Firebase Preview
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}"
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          expires: 30d
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

  # Deploy to Production (for main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        e2e-tests,
        performance-accessibility,
        security-scan,
        firebase-rules-test,
      ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}"
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deploy Firestore Rules
        run: firebase deploy --only firestore:rules,firestore:indexes
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage Rules
        run: firebase deploy --only storage
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Deployment Verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: sleep 30

      - name: Run smoke tests
        run: |
          curl -f https://schools-in-check.web.app || exit 1
          echo "‚úÖ Production deployment verified"

      - name: Run production Lighthouse audit
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=https://schools-in-check.web.app
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Test Results Summary
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance-accessibility, security-scan]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "## üìä Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "‚úÖ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "‚úÖ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.performance-accessibility.result }}" == "success" ]; then
            echo "‚úÖ Performance & Accessibility: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Performance & Accessibility: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "‚úÖ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Security Scan: Issues Found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìà **Artifacts Available:**" >> $GITHUB_STEP_SUMMARY
          echo "- Test Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Test Videos & Screenshots" >> $GITHUB_STEP_SUMMARY  
          echo "- Performance & Lighthouse Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan Results" >> $GITHUB_STEP_SUMMARY

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-results, deploy-production, deploy-preview]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: needs.test-results.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            ‚úÖ CI/CD Pipeline completed successfully!
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            All tests passed and deployment successful.

      - name: Notify Slack on Failure
        if: needs.test-results.result == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_MESSAGE: |
            ‚ùå CI/CD Pipeline failed!
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Please check the workflow logs for details.
