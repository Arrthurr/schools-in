name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: 'schools-in-check'

jobs:
  # Comprehensive pre-release testing
  pre-release-tests:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run full test suite
        run: |
          npm run lint
          npm run test:ci
          npm run test:e2e:ci
          npm run test:performance
          npm run test:a11y
        env:
          CI: true
          
      - name: Build application
        run: npm run build
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: release-test-results
          path: |
            coverage/
            cypress/videos/
            cypress/screenshots/
            .lighthouseci/

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run comprehensive security audit
        run: |
          npm audit --audit-level=low
          npx audit-ci --config audit-ci.json
        continue-on-error: false

  # Performance baseline
  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    needs: [pre-release-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate performance baseline
        run: |
          npm run lighthouse:local
          echo "Performance baseline generated for release"
        env:
          LHCI_BUILD_CONTEXT__EXTERNAL_BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
      - name: Store performance baseline
        uses: actions/upload-artifact@v3
        with:
          name: performance-baseline
          path: .lighthouseci/

  # Create release package
  create-release-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [pre-release-tests, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build production bundle
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Create release package
        run: |
          mkdir -p release-package
          
          # Copy essential files
          cp -r .next release-package/
          cp -r out release-package/ 2>/dev/null || echo "No out directory"
          cp package.json package-lock.json release-package/
          cp firebase.json .firebaserc release-package/
          cp firestore.rules storage.rules release-package/
          cp -r firestore.indexes.json release-package/ 2>/dev/null || echo "No indexes file"
          
          # Create deployment info
          echo "Release: ${{ github.ref_name }}" > release-package/RELEASE_INFO.txt
          echo "Build Date: $(date)" >> release-package/RELEASE_INFO.txt
          echo "Commit: ${{ github.sha }}" >> release-package/RELEASE_INFO.txt
          echo "Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> release-package/RELEASE_INFO.txt
          
          # Create archive
          tar -czf schools-in-${{ github.ref_name }}.tar.gz -C release-package .
          
      - name: Upload release package
        uses: actions/upload-artifact@v3
        with:
          name: release-package-${{ github.ref_name }}
          path: |
            schools-in-${{ github.ref_name }}.tar.gz
            release-package/

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release-package]
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download release package
        uses: actions/download-artifact@v3
        with:
          name: release-package-${{ github.ref_name }}
          
      - name: Deploy to Firebase Staging
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: staging
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

  # Staging verification
  staging-verification:
    name: Staging Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for staging deployment
        run: sleep 60
        
      - name: Run staging smoke tests
        run: |
          # Get staging URL (would be provided by Firebase)
          STAGING_URL="https://schools-in-check--staging-xyz.web.app"
          
          # Basic connectivity test
          curl -f $STAGING_URL || exit 1
          
          # Run Lighthouse against staging
          npx @lhci/cli autorun --collect.url=$STAGING_URL --collect.numberOfRuns=1
        continue-on-error: true

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [staging-verification, performance-baseline]
    environment: production
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download release package
        uses: actions/download-artifact@v3
        with:
          name: release-package-${{ github.ref_name }}
          
      - name: Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_SCHOOLS_IN_CHECK }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
          
      - name: Deploy Firebase Rules and Functions
        run: |
          npm install -g firebase-tools
          firebase deploy --only firestore:rules,firestore:indexes,storage
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Production verification
  production-verification:
    name: Production Verification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Wait for production deployment
        run: sleep 60
        
      - name: Run production verification
        run: |
          # Production URL
          PROD_URL="https://schools-in-check.web.app"
          
          # Basic connectivity test
          curl -f $PROD_URL || exit 1
          
          echo "✅ Production deployment verified"
          
      - name: Run production performance audit
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=https://schools-in-check.web.app --assert
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Release notes and notification
  release-notification:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [production-verification]
    if: always()
    
    steps:
      - name: Generate release summary
        run: |
          echo "## 🚀 Release ${{ github.ref_name }} Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.pre-release-tests.result }}" == "success" ]; then
            echo "✅ Pre-release Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Pre-release Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Production Deployment: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Production Deployment: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.production-verification.result }}" == "success" ]; then
            echo "✅ Production Verification: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Production Verification: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Production URL**: https://schools-in-check.web.app" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Performance Reports**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify Slack
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            🚀 Schools-In Release ${{ github.ref_name }} deployed successfully!
            
            ✅ All tests passed
            ✅ Security scan clean  
            ✅ Performance verified
            
            🌐 Live at: https://schools-in-check.web.app
            
      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_MESSAGE: |
            ❌ Schools-In Release ${{ github.ref_name }} failed!
            
            Please check the workflow logs and take corrective action.
            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
